pico-8 cartridge // http://www.pico-8.com
version 18
__lua__

function _init()

    -- frame count --
    frame_count = 0
    seconds = 0

    function manage_frame_count()

        if frame_count / 61 == 1 then
            frame_count = 0
            seconds = 0 + 1
        end
        
        frame_count = frame_count + 1
    end

    -- speakers --

    speaker = {
        w = 4,
        h = 4
    }

    speaker_sprites = {
        64,
        68
    }

    amp_stack_coords = {
        {
            x = 37,
            y = - 8,
            s = 1
        },
        {
            x = 20,
            y = 8,
            s = 1
        },
        {
            x = 3,
            y = 24,
            s = 1
        },
        {
            x = - 14,
            y = 40,
            s = 2
        },
        {
            x = 26,
            y = - 16,
            s = 1
        },
        {
            x = 9,
            y = 0,
            s = 2
        },
        {
            x = -8,
            y = 16,
            s = 1
        }
    }

    honk = "yo"

    function draw_amp_stack()
        foreach(amp_stack_coords, function(coord) 
            spr(speaker_sprites[coord.s], coord.x, coord.y, speaker.w, speaker.h)
        end)
    end

    function manage_stack_sprites()
        foreach(amp_stack_coords, function(coord)  
            if frame_count % (flr(rnd(5)) + 3) == 0 then
                if coord.s == 1 then
                    coord.s = 2
                else
                    coord.s = 1
               end
            end
        end)
    end


    -- dj hunter --
    dj_hunter = {
        base = 0,
        bop_base = 2,
        base_arm = 4,
        bop_arm = 6,
        base_arm_2 = 8,
        bop_up = 10,
        base_out = 12,
        base_pump = 14,
        state = "jam",
        flipped = false,
        x = 45,
        y = 30,
        w = 2,
        h = 2
    }

    dj_hunter_sprite_state = 1

    dj_jam_basic = {
        0,
        2
    }

    dj_dance_one = {
        4,
        6
    }

    dj_dance_two = {
        8,
        10
    }

    dj_pump = {
        12,
        14
    }

    dj_freakout = {
        4,
        10,
        6,
        8,
        14,
        12,
        14,
        4,
        6,
        10,
        8
    }

    function manage_dj_anim(anim, random, rate)

        local anim_rate = rate

        if random then
            anim_rate = flr(rnd(8) + 3)
        end

        if frame_count % anim_rate == 0 then
            if dj_hunter_sprite_state == #anim then
                dj_hunter_sprite_state = 1
            else 
                dj_hunter_sprite_state = dj_hunter_sprite_state + 1
            end
        end
    end

    function manage_dj_by_state()

        if dj_hunter.state == "jam" then
            manage_dj_anim(dj_jam_basic, false, 10)
        end

    end

    function draw_dj_hunter_by_state()

        if dj_hunter.state == "jam" then
            spr(dj_jam_basic[dj_hunter_sprite_state], dj_hunter.x, dj_hunter.y, dj_hunter.w, dj_hunter.h, dj_hunter.flipped)
        end

    end

    -- turn tables --
    tt_base = {
        sprite_number = 128,
        x = 50,
        y = 23,
        w = 4,
        h = 4
    }

    tt_disk = {
        x = 62,
        y = 25,
        w = 2,
        h = 2
    }

    tt_sprites = {
        133,
        135,
        137,
        139
    }

    disk_offset = {
        x = - 10,
        y = 8
    }

    disk_state = 1

    function draw_turntables()
        draw_tt_base()
        draw_disks()
    end

    function draw_tt_base()
        spr(tt_base.sprite_number, tt_base.x, tt_base.y, tt_base.w, tt_base.h)
    end

    function draw_disks()
        spr(tt_sprites[disk_state], tt_disk.x, tt_disk.y, tt_disk.w, tt_disk.h)
        spr(tt_sprites[disk_state], ( tt_disk.x + disk_offset.x ), ( tt_disk.y + disk_offset.y ), tt_disk.w, tt_disk.h)
    end

    function manage_disk_state()
        if frame_count % 5 == 0 then

            local next_state = disk_state + 1

            if next_state > 4 then next_state = 1 end

            disk_state = next_state

        end
    end


    gob_count = 25
    gobs = {}

    -- 1 is green, 2 pink
    gob_colors = {
        1,
        2
    }

    gob_basic_1 = {
        34,
        35
    }

    gob_basic_2 = {
        50,
        51
    }


    function create_gobs()
        for i = 1, gob_count do
            add(gobs, {
                x = flr(rnd(60)) + 84,
                y = flr(rnd(60)) + 25,
                c = flr(rnd(2)) + 1,
                state = "basic",
                sprite_state = 1,
                flipped = false,
                w = 1,
                h = 1 
            })
        end
    end

    function manage_gob(gob, anim, random, rate)

        local anim_rate = rate

        if random then
            anim_rate = flr(rnd(8) + 3)
        end


        if frame_count % anim_rate == 0 then

            if gob.sprite_state == #anim then
                gob.sprite_state = 1
            else
                gob.sprite_state = gob.sprite_state + 1
            end
        end
    end

    function manage_gobs_by_state()
        for gob in all(gobs) do
            if gob.state == "basic" then
                if gob.c == 1 then
                    manage_gob(gob, gob_basic_1, false, 10)
                else
                    manage_gob(gob, gob_basic_2, false, 10)
                end
            end
        end
    end

    function draw_gobs_by_state()
        for gob in all(gobs) do
            if gob.state == "basic" then
                if gob.c == 1 then
                    spr(gob_basic_1[gob.sprite_state], gob.x, gob.y, gob.w, gob.h, gob.flipped)
                else
                    spr(gob_basic_2[gob.sprite_state], gob.x, gob.y, gob.w, gob.h, gob.flipped)
                end
            end
        end
    end


    -- score --

    score = 0
    combo = 0
    combo_cap = 7

    function manage_score(postive)

        if positive == 0 then
            score = combo + 1
            if combo < combo_cap then
                combo = combo + 1
            end
        else
             score = score - 1
             combo = 0
        end
    end


    -- hit management --


    target_one = {
        target = 1,
        targets = {
            up = 1,
            right = 2,
            down = 3,
            left = 4
        },
        x = 85,
        y = 97,
        box = {x1=0, y1=0, x2=17, y2=17},
        w = 17,
        h = 17,
        c = 9,
        active = false
    }

    row_one_speed = 1.5
    row_one_frames_buffer = 30
    buffer_counter_one = 0
    row_one_buffer_active = false

    row_one_incoming = {}
    row_one_hit = {}
    row_one_miss = {}

    good_hit_row_one = false
    good_hit_row_one_timer = 0

    bad_hit_row_one = false
    bad_hit_row_one_timer = 0


    function manage_row_one_collisions()
        local hit_check = false
        for h in all(row_one_incoming) do
            if h.x > (target_one.x - 5) then
                if coll(target_one, h) then
                    target_one.active = true
                    target_one.target = h.type
                    hit_check = true
                end
            end
        end

        if not hit_check then
            target_one.active = false
            target_one.target = -1
        end
    end

    function check_key_down_target_one(type)
        if target_one.active and target_one.target == type then
            for h in all(row_one_incoming) do
                if coll(target_one, h) then
                    h.hit = true
                    positive_hit(h)
                    good_hit_row_one = true
                end
            end
        else
            negative_hit()
            bad_hit_row_one = true
        end
    end

    function positive_hit(hit_obj)

        local obj_data = assign_hit_obj_sprite(2, hit_obj.type)

        score = score + combo + 1

        hits_this_level = hits_this_level + 1
        total_hits = total_hits + 1

        if combo < combo_cap then
            combo = combo + 1
        end

        add(row_one_hit, hit_obj)
        del(row_one_incoming, hit_obj)

    end 

    function negative_hit()
    end

    function miss_check()
        for h in all(row_one_incoming) do
            if h.x > (target_one.x + target_one.box.x2 + 2) then
                local obj_data = assign_hit_obj_sprite(3, h.type)
                h.sprite = obj_data.sprite

                score = score - 1
                combo = 0

                misses_this_level = misses_this_level - 1
                total_misses = total_misses - 1

                add(row_one_miss, h)
                del(row_one_incoming, h)
            end
        end
    end

    function out_of_bounds_check()

        for h in all(row_one_incoming) do
            if h.x > 150 then
                del(row_one_incoming, h)
            end
        end

        for h in all(row_one_hit) do
            if h.x > 150 then
                del(row_one_hit, h)
            end
        end

        for h in all(row_one_miss) do
            if h.x > 150 then
                del(row_one_miss, h)
            end
        end

    end

    function manage_gameplay_keydowns()

        if ( btnp( 0 )) then
            check_key_down_target_one(4)
        end

        if ( btnp( 1 )) then
            check_key_down_target_one(2)
        end

        if ( btnp( 2 )) then
            check_key_down_target_one(1)
        end

        if ( btnp( 3 )) then
            check_key_down_target_one(3)
        end

        if ( btnp( 4 )) then

        end

        if ( btnp( 5 )) then

        end

    end

    function manage_good_hit_row_one()
        if good_hit_row_one then
            good_hit_row_one_timer = good_hit_row_one_timer + 1 
            if good_hit_row_one_timer >= 7 then
                good_hit_row_one = false
                good_hit_row_one_timer = 0
            end
        end
    end

    function manage_bad_hit_row_one()
        if bad_hit_row_one then
            bad_hit_row_one_timer = bad_hit_row_one_timer + 1 
            if bad_hit_row_one_timer >= 7 then
                bad_hit_row_one = false
                bad_hit_row_one_timer = 0
            end
        end
    end


    function manage_hit_creation_row_one()

        if not row_one_buffer_active then
            if frame_count % flr(rnd(10) + 5) == 0 then
                make_row_one_object()
                row_one_buffer_active = true
            end
        end


        if row_one_buffer_active then
                buffer_counter_one = buffer_counter_one + 1
            if buffer_counter_one == row_one_frames_buffer then
                row_one_buffer_active = false
                buffer_counter_one = 0
            end
        end
    end

    function manage_hit_objects()

        for h in all(row_one_incoming) do 
            h.x = h.x + h.v
        end


        for h in all(row_one_miss) do 
            h.x = h.x + h.v
        end
        

        for h in all(row_one_hit) do 
            h.x = h.x + h.v
        end

    end

    function draw_hits(collection)
        for h in all(collection) do
            spr(h.sprite, h.x, h.y, h.w, h.h, h.flipped_x, h.flipped_y)
        end
    end

    function make_row_one_object()

        local rndnumb = flr(rnd(4) + 1)
        local obj_info = assign_hit_obj_sprite(1, rndnumb)
    
        add(row_one_incoming, {
            x = 0,
            y = 98,
            box = {x1=0, y1=0, x2=16, y2=16},
            w = 2,
            h = 2,
            v = row_one_speed,
            hit = false,
            state = 1,
            sprite = obj_info.sprite,
            flipped_x = obj_info.flipped_x,
            flipped_y = obj_info.flipped_y,
            type = rndnumb
        })

    end

    function assign_hit_obj_sprite(state, type)

        flipped_x = false
        flipped_y = false

        if state == 1 then
            if type == 1 then
                sprite = 192
            elseif type == 2 then
                sprite = 194
            elseif type == 3 then
                sprite = 192
                flipped_y = true
            elseif type == 4 then
                sprite = 194
                flipped_x = true
            elseif type == 5 then
                sprite = 196
            elseif type == 6 then
                sprite = 198
            end
        elseif state == 2 then
         
            if type == 1 then
                sprite = 200
            elseif type == 2 then
                sprite = 202
            elseif type == 3 then
                sprite = 200
                flipped_y = true
            elseif type == 4 then
                sprite = 202
                flipped_x = true
            elseif type == 5 then
                sprite = 204
            elseif type == 6 then
                sprite = 206
            end
        elseif state == 3 then
            if type == 1 then
                sprite = 224
            elseif type == 2 then
                sprite = 226
            elseif type == 3 then
                sprite = 224
                flipped_y = true
            elseif type == 4 then
                sprite = 226
                flipped_x = true
            elseif type == 5 then
                sprite = 228
            elseif type == 6 then
                sprite = 230
            end
        end

        return {flipped_x = flipped_x, flipped_y = flipped_y, sprite = sprite}
    end


    function draw_target_one()

        if target_one.active then
            rectfill(target_one.x, target_one.y, target_one.x + target_one.w, target_one.y + target_one.h, 10)
        else
            rectfill(target_one.x, target_one.y, target_one.x + target_one.w, target_one.y + target_one.h, target_one.c)
        end


        if good_hit_row_one then
            rect(target_one.x - 1, target_one.y - 1, target_one.x + target_one.w + 1, target_one.y + target_one.h + 1, 11)
        elseif bad_hit_row_one then
            rect(target_one.x - 1, target_one.y - 1, target_one.x + target_one.w + 1, target_one.y + target_one.h + 1, 8)
        else
            rect(target_one.x - 1, target_one.y - 1, target_one.x + target_one.w + 1, target_one.y + target_one.h + 1, 7)
        end

    end


    -- collion logics --
    function abs_box(s)
    	local box = {}
    	box.x1 = s.box.x1 + s.x
    	box.y1 = s.box.y1 + s.y
    	box.x2 = s.box.x2 + s.x
    	box.y2 = s.box.y2 + s.y
    	return box
    end

    function coll(a,b)

    	local	box_a = abs_box(a)
    	local	box_b = abs_box(b)
    
    	if box_a.x1 > box_b.x2 or
    				box_a.y1 > box_b.y2 or
    				box_b.x1 > box_a.x2 or
    				box_b.y1 > box_a.y2 then
    				return false
    	end
    
    	return true
    end

    -- frame --
    function draw_frame()
        rect(0, 0, 127, 127, 7)
    end


    function draw_hit_tray()
        rect(0, 100, 127, 110, 7)
        rectfill(0, 101, 127, 109, 13)
    end


    -- music -- 

    music_playing = false
    score_at_last_change = 0


    function manage_music()

        if music_playing == false then
            music(0)
 
            score_at_last_change = score
            music_playing = true
        end

        if (score - score_at_last_change) > 100 then

            music(-1, 300)    

            music(2)
            score_at_last_change = score
        end

    end


    -- jam level mgmt --

    total_hits = 0
    total_misses = 0

    current_jam_level = 1

    hits_this_level = 0
    misses_this_level = 0

    jam_levels = {
        {
            row_speed = .7,
            types = 4,
            hits_to_progress = 15,
            misses_to_fail = 100
        },
        {
            row_speed = .7,
            types = 4,
            hits_to_progress = 25,
            misses_to_fail = 20
        },
        {
            row_speed = .7,
            types = 6,
            hits_to_progress = 35,
            misses_to_fail = 25
        },
        {
            row_speed = .7,
            types = 6,
            hits_to_progress = 100,
            misses_to_fail = 15
        }
    }


    function manage_jam_level()

        if jam_levels[current_jam_level].hits_to_progress == hits_this_level then
            jam_level_up()
        end

        if jam_levels[current_jam_level].misses_to_fail == misses_this_level then
            jam_level_down()
        end

    
    end


    function jam_level_up()
        
        hits_this_level = 0
        misses_this_level = 0

        if #jam_levels != current_jam_level then
            current_jam_level = current_jam_level + 1
        end

    end

    function jam_level_down()
        hits_this_level = 0
        misses_this_level = 0

        if  1 != current_jam_level then
            current_jam_level = current_jam_level - 1
        end




    end



    -- testing function --


    function draw_b_boxes()

        rect(target_one.x + target_one.box.x1, target_one.y + target_one.box.y1, target_one.x + target_one.box.x2, target_one.y + target_one.box.y2, 10 )

        for h in all(row_one_incoming) do
            rect(h.x + h.box.x1, h.y + h.box.y1, h.x + h.box.x2, h.y + h.box.y2, 10 )
        end

    end

    ---------------------

    create_gobs()


end

function _update60()

    manage_frame_count()
    manage_music()
    manage_disk_state()
    manage_stack_sprites()
    manage_dj_by_state()
    manage_gobs_by_state()
    manage_hit_creation_row_one()
    manage_hit_objects()
    manage_row_one_collisions()
    manage_good_hit_row_one()
    manage_bad_hit_row_one()
    manage_gameplay_keydowns()
    out_of_bounds_check()
    miss_check()


end

function _draw()
    cls()
    map(7, 5, 0, 0, 100, 100)
    draw_amp_stack()
    draw_dj_hunter_by_state()
    draw_turntables()
    draw_gobs_by_state()

    draw_hit_tray()
    draw_target_one()
    draw_hits(row_one_incoming)
    draw_hits(row_one_hit)
    draw_hits(row_one_miss)

    -- draw_b_boxes()
    -- print(target_one.active, 45, 45)



    draw_frame()
end


__gfx__
00001111110000000000011111100000000011111100000000000111111000000000111111000000000001111110000000001111110000000000111111000000
00010555501000000000105555010000000105555010000000001055550100000001055550100000000010555501000000010555501000000001055550100000
0011ccbcbc11000000011ccbcbc110000011ccbcbc11000000011ccbcbc110000011ccbcbc11000000011ccbcbc110000011ccbcbc1100000011ccbcbc110000
0011ccbcbc11000000011ccbcbc110000011ccbcbc11000000011ccbcbc110000011ccbcbc11000000011ccbcbc110000011ccbcbc1100000011ccbcbc110000
00015555551000000000155555510000000155555510000000001555555100000001555555100000000015555551000000015555551000000001555555100000
00000555500000000000005555000000000005555000000000000055550000000000055550000000000500555505000000000555500000000050055550005000
000066ccc6000000000066ccc6000000000066ccc6000000000066ccc6000000000066ccc6000000000566ccc6050000000066ccc6000000000566ccc6050000
000656ccc6500000000656ccc6500000000656ccc6555000055556ccc6500000005556ccc6500000000656ccc6500000005556ccc6555000000656ccc6500000
0006566c665000000006566c665000000006566c660000000006666c660500000006666c660500000006666c660000000006666c660000000006666c66000000
0006566c665000000006566c665000000006566c660000000006666c660000000006666c660000000006666c660000000006666c660000000006666c66000000
0000666c660000000000666c660000000000666c660000000000666c660000000000666c660000000000666c660000000000666c660000000000666c66000000
00000111110000000000011111000000000001111100000000000111110000000000011111000000000001111100000000000111110000000000011111000000
00000110110000000000011011000000000001101100000000000110110000000000011011000000000001101100000000000110110000000000011011000000
00001110111000000000111011100000000011101110000000001110111000000000111011100000000011101110000000001110111000000000111011100000
00001110111000000000111011100000000011101110000000001110111000000000111011100000000011101110000000001110111000000000111011100000
00005550555000000000555055500000000055505550000000005550555000000000555055500000000055505550000000005550555000000000555055500000
00000000000000000030300000000000303030030030300000303000003030000030300030303003000000000000000000000000000000000000000000000000
000000022222222003333330003030000333333033333333033333300333333033a3a33303a3a330000000000000000000000000000000000000000000000000
000000211111111233a3a3330333333003a3a33003a3a33003a3a33333a3a3300333333003333330000000000000000000000000000000000000000000000000
00000211111111220333333033a3a3330333333003333330333333300333333303aaa33003aaa330000000000000000000000000000000000000000000000000
000021111111121203aaa3300333333003aaa33003aaa33003aaa33003aaa33003aaa33003aaa330000000000000000000000000000000000000000000000000
00021111111121120333333003aaa330033333300333333003333330033333300333333003333330000000000000000000000000000000000000000000000000
00211111111211123330033333333333333003333330033303300333333003303330033333300333000000000000000000000000000000000000000000000000
02111111112111123330033333300333333003333330033303300333333003303330033333300333000000000000000000000000000000000000000000000000
211111111211111200e0e00000000000e0e0e00e00e0e00000e0e00000e0e00000e0e000e0e0e00e000000000000000000000000000000000000000000000000
22222222211111200eeeeee000e0e0000eeeeee0eeeeeeee0eeeeee00eeeeee0eefefeee0efefee0000000000000000000000000000000000000000000000000
2111111121111200eefefeee0eeeeee00efefee00efefee00efefeeeeefefee00eeeeee00eeeeee0000000000000000000000000000000000000000000000000
21111111211120000eeeeee0eefefeee0eeeeee00eeeeee0eeeeeee00eeeeeee0efffee00efffee0000000000000000000000000000000000000000000000000
21111111211200000efffee00eeeeee00efffee00efffee00efffee00efffee00efffee00efffee0000000000000000000000000000000000000000000000000
21111111212000000eeeeee00efffee00eeeeee00eeeeee00eeeeee00eeeeee00eeeeee00eeeeee0000000000000000000000000000000000000000000000000
2111111122000000eee00eeeeeeeeeeeeee00eeeeee00eee0ee00eeeeee00ee0eee00eeeeee00eee000000000000000000000000000000000000000000000000
0222222220000000eee00eeeeee00eeeeee00eeeeee00eee0ee00eeeeee00ee0eee00eeeeee00eee000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000022222222222200000000000000000000222222222222000000000000000000000000000000000000000000000000000000000000000000
00000000000000000211111111112120000000000000000002111111111121200000000000000000000000000000000000000000000000000000000000000000
0000000000000000211dd1111d1211200000000000000000211dd1111d1211200000000000000000000000000000000000000000000000000000000000000000
000000000000000211d11111d121d120000000000000000211d11111d121d1200000000000000000000000000000000000000000000000000000000000000000
0000000000000021111111111211d1200000000000000021111111111211d1200000000000000000000000000000000000000000000000000000000000000000
00000000000002111111111121111120000000000000021111111111211111200000000022222222222222222222222200000000000000000000000000000000
00000000000021111111111211111120000000000000211111111112111111200000000000000000000000000000000022000000000000000000000000000000
000000000002111111111121ddd11120000000000002111111111121ddd111200000000000000000000000000000000200200000000000000000000000000000
00000000002111111111121d111d112000000000002111111111121ddddd11200000000000000000000000000000002000020000000000000000000000000000
0000000002111111111121d1ddd1d1200000000002111111111121dd11ddd1200000000000000000000000000000020000020000000000000000000000000000
000000002111111111121d1dddd1d120000000002111111111121dd1dd1dd1200000000000000000000000000000200000200000000000000000000000000000
0000000211d1111d11211d1dddd1d1200000000211d1111d11211d1ddd1dd1200000000000000000000000000002000002222222222222220000000000000000
000000211d1111d11211d1dd1dd1d120000000211d1111d11211dd1d1d1dd1200000000000000000000000000020000020000000000000000000000000000000
000002111111111121d1d1d1d1d1d120000002111111111121d1d1dd1d1dd1200000000000000000000000000200000200000000000000000000000000000000
00002222222222221d1d1d1d1d1d112000002222222222221d1dd1d1d1dd11200000000000000000000000002000002000000000000000000000000000000000
00002111111111121d1d1dd1dd1d1d2000002111111111121d1dd1ddd1dd1d200000000000000000000000020000020000000000000000000000000000000000
000021dd1111dd12111d1dddd1d11200000021dd1111dd12111dd1dd1dd112000000000000000000000000200000200000000000000000000000000000000000
000021d111111d12111d1dddd1d12000000021d111111d12111dd1dd1dd120000000000000000000000002000002000000000000000000000000000000000000
00002111111111121111d1dd1d12000000002111111111121111dd11dd1200000000000000000000000020000020000000000000000000000000000000000000
00002111111111121111dd11d120000000002111111111121111ddddd12000000000000000000000000200000200000000000000000000000000000000000000
000021111111111211111ddd12000000000021111111111211111ddd120000000000000000000000002000002000000000000000000000000000000000000000
00002111111111121111111120000000000021111111111211111111200000000000000000000000020000020000000000000000000000000000000000000000
00002111111111121d1111120000000000002111111111121d111112000000000000000000000000200000200000000000000000000000000000000000000000
00002111111111121d1d11200000000000002111111111121d1d1120000000002222222222222222000002000000000000000000000000000000000000000000
00002111111111121dd112000000000000002111111111121dd11200000000000000000000000000000020000000000000000000000000000000000000000000
00002111111111121d1120000000000000002111111111121d112000000000000000000000000000000200000000000000000000000000000000000000000000
000021d111111d121112000000000000000021d111111d1211120000000000000000000000000000002000000000000000000000000000000000000000000000
000021d111111d121120000000000000000021d111111d1211200000000000002222222222222222220000000000000000000000000000000000000000000000
000021dd1111dd121200000000000000000021dd1111dd1212000000000000000000000000000000000000000000000000000000000000000000000000000000
00002111111111122000000000000000000021111111111220000000000000000000000000000000000000000000000000000000000000000000000000000000
00000222222222220000000000000000000002222222222200000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000ddd6660000000000666666000000000066666600000000006666dd00000000000000000000000000000
000000000000000000000000000000000000000000006dddddd6000000006dddddd6000000006dddddd6000000006ddddddd0000000000000000000000000000
00000000000000000000000000000000000000000006ddddd6dd6000000dddd66ddd60000006dd6dddddd0000006dddddddd6000000000000000000000000000
0000000000000000000000000000000000000000006ddddddd6dd60000ddddddddddd600006dd6dddddddd00006dddddddddd600000000000000000000000000
0000000000000002222222222222200000000000006dddd67dddd60000ddddd76dddd600006dddd67ddddd00006dd6d76d6dd600000000000000000000000000
0000000000000021111111111111120000000000006d6dd76dddd600006dddd67ddddd0000ddddd76dddd600006dd6d67d6dd600000000000000000000000000
0000000000000211111111111111212000000000006dd6ddddddd600006ddddddddddd0000dddddddd6dd600006dddddddddd600000000000000000000000000
00000000000021111111111111121120000000000006dddddddd60000006dd66ddddd000000dddddd6dd60000006dddddddd6000000000000000000000000000
000000000002111111111111112111200000000000006dddddd6000000006dddddd6000000006dddddd600000000ddddddd60000000000000000000000000000
0000000000211111111111111211d1200000000000000666ddd000000000066666600000000006666660000000000dd666600000000000000000000000000000
00000000021111111111111121111120000000007777777777777777777777777777777777777777777777770000000000000000000000000000000000000000
00000000211111111111111211d11200000000007777777777777777777777777777777777777777777777770000000000000000000000000000000000000000
00000002111111111111112111112000000000007777777777777777777777777777777777777777777777770000000000000000000000000000000000000000
000000211111111111111211d1120000000000007777777777777777777777777777777777777777777777770000000000000000000000000000000000000000
00000211111111111111211111200000000000007777777777777777777777777777777777777777777777770000000000000000000000000000000000000000
0000211111111111111211d112000000000000007666666666666667766666666666666777777777777777770000000000000000000000000000000000000000
00021111111111111121111120000000000000007655555555555567763333333333336777777777777777770000000000000000000000000000000000000000
00211111111111111211d11200000000000000007655555555555567763333333333336777777777777777770000000000000000000000000000000000000000
02111111111111112111112000000000000000007655555555555567763333333333336777777777777777770000000000000000000000000000000000000000
222222222222222211d1120000000000000000007655555555555567763333333333336777777777777777770000000000000000000000000000000000000000
21111111111111121111200000000000000000007666666666666667766666666666666777777777777777770000000000000000000000000000000000000000
21111111111111121112000000000000000000007777777777777777777777777777777777777777777777770000000000000000000000000000000000000000
21d1111111111d121120000000000000000000007777777777777777777777777777777777777777777777770000000000000000000000000000000000000000
21dd11111111dd121200000000000000000000007777777777777777777777777777777777777777777777770000000000000000000000000000000000000000
21111111111111122000000000000000000000007777777777777777777777777777777777777777777777770000000000000000000000000000000000000000
02222222222222220000000000000000000000007777777777777777777777777777777777777777777777770000000000000000000000000000000000000000
000000cccc00000000000000cc00000000000cccccc0000000000cccccc00000000000bbbb00000000000000bb00000000000bbbbbb0000000000bbbbbb00000
00000cccccc000000000000cccc00000000cccccccccc000000cccccccccc00000000bbbbbb000000000000bbbb00000000bbbbbbbbbb000000bbbbbbbbbb000
0000cccccccc00000000000ccccc000000cccccccccccc0000cccccccccccc000000bbbbbbbb00000000000bbbbb000000bbbbbbbbbbbb0000bbbbbbbbbbbb00
000cccccccccc0000000000cccccc0000cccccc66cccccc00cccc666666cccc0000bbbbbbbbbb0000000000bbbbbb0000bbbbbb33bbbbbb00bbbb333333bbbb0
00cccccccccccc00cccccccccccccc000cccccc66cccccc00ccc66666666ccc000bbbbbbbbbbbb00bbbbbbbbbbbbbb000bbbbbb33bbbbbb00bbb33333333bbb0
0cccccccccccccc0ccccccccccccccc0ccccccc66ccccccccccc66cccc66cccc0bbbbbbbbbbbbbb0bbbbbbbbbbbbbbb0bbbbbbb33bbbbbbbbbbb33bbbb33bbbb
ccccccccccccccccccccccccccccccccccccccc66ccccccccccccccc6666ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb33bbbbbbbbbbbbbbb3333bbbb
ccccccccccccccccccccccccccccccccccccccc66ccccccccccccc66666cccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb33bbbbbbbbbbbbb33333bbbbb
0cccccccccccccc0ccccccccccccccccccccccc66cccccccccccc6666ccccccc0bbbbbbbbbbbbbb0bbbbbbbbbbbbbbbbbbbbbbb33bbbbbbbbbbbb3333bbbbbbb
00000cccccc00000ccccccccccccccccccccccc66ccccccccccc666ccccccccc00000bbbbbb00000bbbbbbbbbbbbbbbbbbbbbbb33bbbbbbbbbbb333bbbbbbbbb
00000cccccc00000ccccccccccccccc0ccccccc66ccccccccccc66666666cccc00000bbbbbb00000bbbbbbbbbbbbbbb0bbbbbbb33bbbbbbbbbbb33333333bbbb
00000cccccc000000000000ccccccc000cccccc66cccccc00ccc66666666ccc000000bbbbbb000000000000bbbbbbb000bbbbbb33bbbbbb00bbb33333333bbb0
00000cccccc000000000000cccccc0000cccccc66cccccc00cccccccccccccc000000bbbbbb000000000000bbbbbb0000bbbbbb33bbbbbb00bbbbbbbbbbbbbb0
00000cccccc000000000000ccccc000000cccccccccccc0000cccccccccccc0000000bbbbbb000000000000bbbbb000000bbbbbbbbbbbb0000bbbbbbbbbbbb00
00000cccccc000000000000cccc00000000cccccccccc000000cccccccccc00000000bbbbbb000000000000bbbb00000000bbbbbbbbbb000000bbbbbbbbbb000
00000cccccc0000000000000cc00000000000cccccc0000000000cccccc0000000000bbbbbb0000000000000bb00000000000bbbbbb0000000000bbbbbb00000
00000088880000000000000088000000000008888880000000000888888000000000000000000000000000000000000000000000000000000000000000000000
00000888888000000000000888800000000888888888800000088888888880000000000000000000000000000000000000000000000000000000000000000000
00008888888800000000000888880000008888888888880000888888888888000000000000000000000000000000000000000000000000000000000000000000
00088888888880000000000888888000088888822888888008888222222888800000000000000000000000000000000000000000000000000000000000000000
00888888888888008888888888888800088888822888888008882222222288800000000000000000000000000000000000000000000000000000000000000000
08888888888888808888888888888880888888822888888888882288882288880000000000000000000000000000000000000000000000000000000000000000
88888888888888888888888888888888888888822888888888888888222288880000000000000000000000000000000000000000000000000000000000000000
88888888888888888888888888888888888888822888888888888822222888880000000000000000000000000000000000000000000000000000000000000000
08888888888888808888888888888888888888822888888888888222288888880000000000000000000000000000000000000000000000000000000000000000
00000888888000008888888888888888888888822888888888882228888888880000000000000000000000000000000000000000000000000000000000000000
00000888888000008888888888888880888888822888888888882222222288880000000000000000000000000000000000000000000000000000000000000000
00000888888000000000000888888800088888822888888008882222222288800000000000000000000000000000000000000000000000000000000000000000
00000888888000000000000888888000088888822888888008888888888888800000000000000000000000000000000000000000000000000000000000000000
00000888888000000000000888880000008888888888880000888888888888000000000000000000000000000000000000000000000000000000000000000000
00000888888000000000000888800000000888888888800000088888888880000000000000000000000000000000000000000000000000000000000000000000
00000888888000000000000088000000000008888880000000000888888000000000000000000000000000000000000000000000000000000000000000000000
__map__
00002c2d2c2d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2a2b3c3d3c3d2a2b2a2b2a2b2a2b2a2b2c2d2c2d2c2d2c2d2c2d2c2d2c2d2c2d2c2d2c2d2c2d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2c2d2c2d3a3b2c2d3a3b2c2d2c2d2c2d2c2d2c2d2c2d3c3d3c3d3c3d3c3d3c3d3c3d3c3d3c3d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3c3d3c3d2a2b3c3d2a2b3c3d3c3d3c3d3c3d3c3d3c3d2c2d2c2d2c2d2c2d2c2d2c2d2c2d2c2d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2c2d3a3b3a3b3a3b2c2d2c2d2c2d2c2d2c2d2c2d2c2d2c2d3c3d3c3d3c3d3c3d3c3d3c7d3c3d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4949494949494949494949494949494949494949494c3c3d2c2d2c2d2c2d2c2d2c2d7d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2c2d2c2d3a3b3a3b2c2d2c2d2c2d2c2d2c2d2c2d5b5c5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3c3d3c3d2a2b2a2b3c3d3c3d3c3d3c3d3c3d3c6a6b3d3c3d3c3d2c2d3c3d3c3d7d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3a3b2c2d2c2d2c2d2c2d2c2d2c2d2c2d2c2d6a6b2c2d2c2d2c2d2c2d2c2d2c7d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2a2b3c3d3c3d3c3d3c3d3c3d3c3d3c3d3c6a6b3d3c3d3c3d3c3d3c3d3c3d3c7d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2c2d2c2d2c2d2c2d2c2d2c2d2c2d2c2d6a6b2c2d2c2d2c2d2c2d2c2d2c2d7d7d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3c3d3c3d3c3d3c3d3c3d3c3d3c3d3c6a6b3d3c3d3c3d3c3d3c3d3c3d3c3d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2c2d2c2d2c2d2c2d2c2d2c2d2c2d6a6b2c2d2c2d2c2d2c2d2c2d2c2d2c2d2c2d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3c3d3c3d3c3d3c3d3c3d3c3d3c6a6b3d3c3d3c3d3c3d3c3d3c3d3c3d3c3d3c3d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000006a6b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7878787878787878787878797a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010800000017700005000000000000000000000000000000001770000000000000000000000000000000000000177000000000000000000000000000000000000017700000000000000000000000000000000000
010800000017700005000000000000000000000000000000001770000000000000000000000000000000000000177000000000000000011740000001174000000017700000000000000001174000000117400000
010800003000000000306000000000000000000000000000306250000000000000001034500002000000000000000000000000000000000000000000000000003062500000000000000000000000000000000000
0108000030000000003060000000000000000000000000003062500000000000000010335000020000000000000000000000000000000000000000000000000030625000001f3350000010335000000000000000
010800000c4210c4210c4210c4220c4220c4220c4220c4220c4220c4220c4220c4220c4220c425000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010800001342113421134211342213422134221342213422134221342213422134221342213425000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010800000b4000000000000000000c4000000000000000000f4000f4000f4000f4000f4000f400000000000000000000000000000000000000000000000000000b4500000000000000000c450000000000000000
010800001240000000000000000013400000000000000000154001540015400154001540015400000000000000000000000000000000000000000000000000001245000000000000000013450000000000000000
010800000f4220f4220f4220f4220f4220f4220f4220f4220f4220f4220f4220f4220f42500000000000000000000000000000000000000000000000000000000e4220e4220e4220000000000000000000000000
010800001442214422144221442214422144221442214422144221442214422144221442500000000000000000000000000000000000000000000000000000001342213422134220000000000000000000000000
010800001142111421114221142211422114221142211422114221142211422114221142500000000000000000000000000000000000000000000000000000001442214422144221442214422144221442500000
010800001642116421164221642216422164221642216422164221642216422164221642500000000000000000000000000000000000000000000000000000001942219422194221942219422194221942500000
__music__
01 00024344
02 01034445
01 00020405
00 01030607
00 00020809
02 01020a0b

